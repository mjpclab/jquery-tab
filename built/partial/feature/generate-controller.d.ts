import Getter from './getter';
import DomUpdater from './dom-updater';
import TabItemSetter from './tab-item-setter';
import Switcher from './switcher';
import Adder from './adder';
import Remover from './remover';
import Mover from './mover';
declare function generateController(getter: Getter, domUpdater: DomUpdater, tabItemSetter: TabItemSetter, switcher: Switcher, adder: Adder, remover: Remover, mover: Mover): {
    getCount: () => number;
    getCurrentIndex: () => number;
    getCurrentName: () => string | undefined;
    getName: (index: number) => any;
    getIndexByName: (name: string) => number;
    isDisabled: (position: JQueryTab.TabItemPosition) => boolean | undefined;
    isEnabled: (position: JQueryTab.TabItemPosition) => boolean;
    isHidden: (position: JQueryTab.TabItemPosition) => boolean | undefined;
    isVisible: (position: JQueryTab.TabItemPosition) => boolean;
    getHeaderLabel: (position: JQueryTab.TabItemPosition) => JQuery<HTMLElement>;
    getFooterLabel: (position: JQueryTab.TabItemPosition) => JQuery<HTMLElement>;
    getHeaderFooterLabels: (position: JQueryTab.TabItemPosition) => JQuery<HTMLElement>;
    getPanel: (position: JQueryTab.TabItemPosition) => JQuery<HTMLElement>;
    getCurrentHeaderLabel: () => JQuery<HTMLElement>;
    getCurrentFooterLabel: () => JQuery<HTMLElement>;
    getCurrentHeaderFooterLabels: () => JQuery<HTMLElement>;
    getCurrentPanel: () => JQuery<HTMLElement>;
    setName: (position: JQueryTab.TabItemPosition, name: string) => void;
    setDisabled: (position: JQueryTab.TabItemPosition, disabled?: boolean) => void;
    setEnabled: (position: JQueryTab.TabItemPosition, enabled?: boolean) => void;
    setHidden: (position: JQueryTab.TabItemPosition, hidden?: boolean) => void;
    setVisible: (position: JQueryTab.TabItemPosition, visible?: boolean) => void;
    updateFixedHeight: () => void;
    switchTo: (newPosition: JQueryTab.TabItemPosition) => JQueryTab.SwitchResult;
    switchPrevious: (switchOptions?: JQueryTab.SwitchOptions | undefined) => JQueryTab.SwitchResult;
    switchNext: (switchOptions?: JQueryTab.SwitchOptions | undefined) => JQueryTab.SwitchResult;
    switchFirst: (switchOptions?: JQueryTab.SwitchOptions | undefined) => JQueryTab.SwitchResult;
    switchLast: (switchOptions?: JQueryTab.SwitchOptions | undefined) => JQueryTab.SwitchResult;
    addTabItem: (tabItem: JQueryTab.TabItem) => void;
    insertTabItem: (position: JQueryTab.TabItemPosition, tabItem: JQueryTab.TabItem) => void;
    add: (sourceRegion: JQueryTab.JQueriable) => void;
    insert: (position: JQueryTab.TabItemPosition, sourceRegion: JQueryTab.JQueriable) => void;
    remove: (...positions: JQueryTab.TabItemPosition[]) => number | undefined;
    exchangeTabItem: (fromPosition: JQueryTab.TabItemPosition, toPosition: JQueryTab.TabItemPosition) => void;
    moveTabItemBefore: (fromPosition: JQueryTab.TabItemPosition, toPosition: JQueryTab.TabItemPosition) => void;
    moveTabItemAfter: (fromPosition: JQueryTab.TabItemPosition, toPosition: JQueryTab.TabItemPosition) => void;
    moveTabItemFirst: (fromPosition: JQueryTab.TabItemPosition) => void;
    moveTabItemLast: (fromPosition: JQueryTab.TabItemPosition) => void;
    moveTabItemPrevious: (fromPosition: JQueryTab.TabItemPosition) => void;
    moveTabItemNext: (fromPosition: JQueryTab.TabItemPosition) => void;
};
export default generateController;
